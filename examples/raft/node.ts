import { Command, LogEntry, NodeState } from './types';
import { randomIn } from './utils';

export class Node {
    static readonly nodes: Node[] = [];

    private readonly id: string;
    public state: NodeState;
    private term: number; // —Ç–µ–∫—É—â–∏–π —Å—Ä–æ–∫
    private votedFor: string | undefined; // ID —É–∑–ª–∞, –∫–æ—Ç–æ—Ä–æ–º—É —ç—Ç–æ—Ç —É–∑–µ–ª –æ—Ç–¥–∞–ª —Å–≤–æ–π –≥–æ–ª–æ—Å –≤ —Ç–µ–∫—É—â–µ–º —Å—Ä–æ–∫–µ

    private electionTimeout: ReturnType<typeof setTimeout> | undefined;
    private heartbeatInterval: ReturnType<typeof setInterval> | undefined;

    private readonly logMap: Map<number, LogEntry>;
    private nextLogIndex: number;

    constructor(
        id: string,
        private readonly heartbeatTime: number,
        private readonly minElectionTimeout: number,
        private readonly maxElectionTimeout: number,
    ) {
        this.id = id;
        this.state = NodeState.Follower; // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ —É–∑–ª—ã - Followers
        this.term = 0;
        this.logMap = new Map<number, LogEntry>();
        this.nextLogIndex = 0;

        this.resetElectionTimer();
    }

    private get isLeader() {
        return this.state === NodeState.Leader;
    }

    becomeCandidate() {
        this.state = NodeState.Candidate;
        this.term += 1; // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—Ä–æ–∫ –Ω–∞ 1, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–µ –≤—ã–±–æ—Ä—ã
        this.votedFor = this.id; // –≥–æ–ª–æ—Å—É–µ–º –∑–∞ —Å–µ–±—è

        console.log(`[Node:${this.id}][${this.term}] üó≥Ô∏è  became candidate`);
    }

    becomeLeader() {
        if (this.state === NodeState.Candidate) {
            this.state = NodeState.Leader;

            console.log(`[Node:${this.id}][${this.term}] üëë became leader`);

            // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–π
            this.startHeartbeatTimer();
        }
    }

    receiveHeartbeat(leaderTerm: number) {
        if (leaderTerm < this.term) {
            return;
        }

        // –°–±—Ä–æ—Å–∏—Ç—å —Ç–∞–π–º–µ—Ä —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –Ω–µ–Ω—É–∂–Ω—ã—Ö –≤—ã–±–æ—Ä–æ–≤
        this.resetElectionTimer();

        if (this.votedFor) {
            this.votedFor = undefined;
        }
        if (this.state !== NodeState.Follower) {
            console.log(`[Node:${this.id}][${this.term}] üêë became follower`);
            this.state = NodeState.Follower;
        }
        if (this.term !== leaderTerm) {
            this.term = leaderTerm;
        }
    }

    static registerNode(...nodes: Array<Node>) {
        Node.nodes.push(...nodes);
    }

    requestVotes() {
        const votesNeeded = Math.floor(Node.nodes.length / 2) + 1;
        let votesReceived = 1; // –ì–æ–ª–æ—Å –∑–∞ —Å–µ–±—è

        Node.nodes.forEach((node) => {
            if (
                node.id !== this.id &&
                node.state === NodeState.Follower &&
                node.term <= this.term
            ) {
                const voteGranted = node.receiveVote(this.id, this.term);
                if (voteGranted) {
                    votesReceived++;
                }
            }
        });

        if (votesReceived >= votesNeeded) {
            this.becomeLeader();
        } else {
            this.votedFor = undefined;
            this.resetElectionTimer();
        }
    }

    receiveVote(candidateId: string, candidateTerm: number): boolean {
        if (
            (this.votedFor === undefined || this.votedFor === candidateId) &&
            this.term <= candidateTerm
        ) {
            this.votedFor = candidateId;
            this.term = candidateTerm;
            return true; // –ì–æ–ª–æ—Å –æ—Ç–¥–∞–Ω
        }

        return false; // –ì–æ–ª–æ—Å –Ω–µ –æ—Ç–¥–∞–Ω
    }

    private sendHeartbeats() {
        if (this.state !== NodeState.Leader) return;

        Node.nodes.forEach((node) => {
            if (node.id !== this.id) {
                node.receiveHeartbeat(this.term);
            }
        });
    }

    private resetElectionTimer() {
        if (this.electionTimeout) clearTimeout(this.electionTimeout);

        if (this.state !== NodeState.Follower) {
            this.state = NodeState.Follower;
        }

        // –ó–∞–¥–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ç–∞–π–º–µ—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç 150 –¥–æ 300 –º—Å
        const timeout = randomIn(this.minElectionTimeout, this.maxElectionTimeout);

        this.electionTimeout = setTimeout(() => {
            this.becomeCandidate();
            this.requestVotes();
        }, timeout);
    }

    private startHeartbeatTimer() {
        if (this.heartbeatInterval) clearInterval(this.heartbeatInterval);

        this.sendHeartbeats();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 50 –º—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä
        this.heartbeatInterval = setInterval(() => {
            this.sendHeartbeats();
        }, this.heartbeatTime);
    }

    async onRequest(request: any): Promise<boolean> {
        return true;
    }

    private broadcast(request: any) {
        const promises: Array<Promise<boolean>> = [];

        Node.nodes.forEach((node) => {
            if (node.id !== this.id) {
                promises.push(node.onRequest(request));
            }
        });

        return Promise.race(promises);
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –∂—É—Ä–Ω–∞–ª
    async appendEntry(term: number, command: Command): Promise<boolean> {
        if (this.isLeader) {
            const successNeeded = Math.floor(Node.nodes.length / 2) + 1;

            // –û—Ç–ø—Ä–∞–≤–∫–∞ AppendEntries –≤—Å–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—è–º –¥–ª—è —Ä–µ–ø–ª–∏–∫–∞—Ü–∏–∏
            Node.nodes.forEach((node) => {
                if (node.id !== this.id) {
                    node.appendEntry(term, command);
                }
            });
        }

        this.applyCommand(command);

        this.logMap.set(this.nextLogIndex, { term, command });

        this.nextLogIndex++;

        return true;
    }

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∏–∑ –∂—É—Ä–Ω–∞–ª–∞ –∫ –º–∞—à–∏–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    applyCommand(command: Command) {
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –∫ –º–∞—à–∏–Ω–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    }

    commit(term: number, commandId: string) {
        // this.broadcast()
    }

    destroy() {
        console.log(`[Node:${this.id}][${this.term}] üõë destroyed`);

        if (this.state !== NodeState.Leader) {
            return;
        }

        if (this.heartbeatInterval) clearInterval(this.heartbeatInterval);

        this.state = NodeState.Follower;
        this.votedFor = undefined;
    }
}
